git最强教程：https://learngitbranching.js.org/?locale=zh_CN
# 提交
git commit
git commit --amend

# branch 操作
git branch <branch_name>                    # create new branch
git branch <branch_name> <position>         # create new branch in certain position
git checkout -b <branch_name>               # create new branch and checkout to it
  # 强行移动 branch, 如果HEAD也在branch上，也跟着移动
git branch -f master HEAD~3                 # Forcely change the branch position 
git branch -f master hashi~3                # Forcely change the branch position 
git branch -f master branch_name~3          # Forcely change the branch position 

# 合并： 
# merge 体现出提交历史，但是略显混乱， # push以后，保存了本地记录
# rebase 使提交树变得干净，所有提交都在一条线上； 但是改变了修改书的历史， # push以后，没有本地提交记录
git merge <branch_name>                     # 合并过来，merge the <branch> to <current_branch>, leave the <branch> in origin place
                                            # <current_branch> 移动
git rebase <branch_name>                    # 合并过去，merge, move <current_branch> to the <branch_name>, leave the <branch> in origin place        
git rebase <position1> <position2>          # 将position2移动到position1上

# 检出切换，相对路径， ^向上一次，～3向上3次
git checkout hasshi^~3                       # checkout to commit point according to hasshi 
git checkout branch_name^~3                  # checkout to commit point according to hasshi 
git checkout HEAD^~2                         # checkout to commit point according to hasshi 
git checkout branch_name^                    # 切换到第一个父节点（提交记录正上方，merge情况下的本体）
git checkout branch_name^2                   # 切换到第二个父节点（提交记录斜上方，merge情况下的本体）

# 撤回提交记录
git reset HEAD~1                                # 本地，在reset后， 被撤的变更还在，但是处于未加入暂存区状态。
git revert HEAD/branch_name/hasshi              # 可推到远程，创建新的提交记录（撤销操作）

# 自由修改提交树
git cherry-pick <哈希值>                        # 将提交复制到当前所在的位置（HEAD）下面，branch也移动
git rebase -i HEAD~4                           # 交互式，移动当前branch，从HEAD～4处创建新点，调整提交顺序，删除提交，合并提交

# 锚点
git tag V1 <position>                       # 在position地方打上tag V1, <position> can be hassi, branch, HEAD, tag
git describe <position>                     # 返回<tag>_<numCommits>_g<hash>, tag表示离得最近的tag， numCommits表示相差多少个提交记录， hash表示给定的<position>的哈希值前几位


pull对应关系： https://www.cnblogs.com/lsgxeva/p/9485707.html
push和pull默认设置： http://blog.angular.in/git-pushmo-ren-fen-zhi/
o/master origin/master                      # 远程分支，o和origin代表远程仓库

# fetch， 可理解为下载操作
git fetch                                   # 拉下所有远程分支
                                            # 不会改变本地仓库的状态，不会更新master分支，不会修改磁盘上的文件
git fetch origin foo                        # Git 会到远程仓库的 foo 分支上，然后获取所有本地不存在的提交，放到本地的 o/foo 上。    
git fetch origin :bar                       # 本地创建一个新分支                                        
git cherry-pick o/master
git rebase o/master
git merge o/master

# git pull  
# 若冲突， 先pull，再push
git pull  = git fetch + git merge <just-fetched-branch>                     # 拉下所有branch，merge当前分支
git pull --rebase = git fetch + git rebase <just-fetched-branch>            # 拉下所有branch，rebase当前分支

git pull origin master                                                      # 通过指定 master 我们更新了 o/master。然后将 o/master merge 到我们的检出位置，无论我们当前检出的位置是哪。
git pull origin foo                                                         # 相当于：git fetch origin foo; git merge o/foo
git pull origin bar~1:bugFix                                                # 不常见，相当于： git fetch origin bar~1:bugFix; git merge bugFix
git pull origin master:foo                                                  # 在本地创建了一个叫 foo 的分支，从远程仓库中的 master 分支中下载提交记录，并合并到 foo，然后再 merge 到我们的当前检出的分支 bar 上
git pull origin <source>:<destination>


# pull request: 大项目中，push需要权限，此时应该将原有分支还原到原本提交点，再新节点新建一个分支，再push并pull request

# 也可fetch下来以后，根据需求将本地commit合并到master上，再与远程变动合并

# 远程跟踪， 两种方法
git checkout -b new_branch o/master         # 创建一个新branch，并取代master跟踪到o/master，移动head到new_branch
git branch -u o/master foo                  # 将foo跟踪到o/master

# git push 参数
git push <remote> <place>  
git push origin master                      # 切到本地仓库中的“master”分支，获取所有的提交，再到远程仓库“origin”中找到“master”分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我。
git push                                    # push当前分支到它的upstream分支上， 也可在后加origin branch名指定branch，要求必须有对应branch
git push -u origin new_branch_name          # 对于新分支需要在后加-u origin branch显式指定branch，并指定upstream, 本地和远程branch名称需要一致
git push origin <source>:<destination>      # 指定了push的来源和目的地, 自动创建新destination, source可以时任何git能识别的位置
git push origin :foo                        # 删除远程以及本地仓库中的分支

tricks:
git reset --mixed HEAD^                     # 不删除工作空间改动代码，撤销commit，并且撤销git add . 操作
git reset --soft HEAD^                      # 不删除工作空间改动代码，撤销commit，不撤销git add .
git reset --hard HEAD^                      # 删除工作空间改动代码，撤销commit，撤销git add . 
git commit --amend -m "----"                # 修改最近一次commit的内容  
